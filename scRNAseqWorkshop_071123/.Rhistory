knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
install.packages("SeuratObject")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("satijalab/seurat", "seurat5", quiet = TRUE)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("lambdamoses/SeuratBasics", upgrade = "never", Ncpus = 2)
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
install.packages("SeuratObject")
install.packages("devtools")
devtools::install_github("lambdamoses/SeuratBasics")
install.packages("devtools")
devtools::install_github("thomasp85/patchwork")
library(dplyr)
library(SeuratBasics)
library(SeuratObject)
library(patchwork)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "filtered_gene_bc_matrices/hg19/")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
#We calculate mitochondrial QC metrics with the PercentageFeatureSet() function, which calculates the percentage of counts originating from a set of features
#We use the set of all genes starting with MT- as a set of mitochondrial genes
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
dim(pbmc)
pbmc <- NormalizeData(pbmc)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
install.packages('Seurat')
install.packages("Seurat")
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
install.packages("SeuratObject")
install.packages('Seurat')
install.packages("devtools")
devtools::install_github("thomasp85/patchwork")
install.packages("devtools")
library(dplyr)
library(Seurat)
library(SeuratObject)
library(patchwork)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "filtered_gene_bc_matrices/hg19/")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
#We calculate mitochondrial QC metrics with the PercentageFeatureSet() function, which calculates the percentage of counts originating from a set of features
#We use the set of all genes starting with MT- as a set of mitochondrial genes
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
dim(pbmc)
pbmc <- NormalizeData(pbmc)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# plot variable features
top10 <- head(VariableFeatures(pbmc), 10)
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
library(knitr)
include_graphics("PCA_example.png")
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc), verbose=F)
#DimHeatmap() allows for easy exploration of the primary sources of heterogeneity in a dataset, and can be useful when trying to decide which PCs to include for further downstream analyses. Both cells and features are ordered according to their PCA scores. Setting cells to a number plots the ‘extreme’ cells on both ends of the spectrum, which dramatically speeds plotting for large datasets. Though clearly a supervised analysis, we find this to be a valuable tool for exploring correlated feature sets.
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
ElbowPlot(pbmc)
library(knitr)
include_graphics("Louvain_clustering.jpg")
pbmc <- FindNeighbors(pbmc, dims = 1:10)
library(SeuratObject)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
?FindNeighbors
pbmc <- FindNeighbors(pbmc, dims = 1:10, nn.method="rann")
pbmc <- FindClusters(pbmc, resolution = 0.5)
pbmc <- RunUMAP(pbmc, dims = 1:10)
# Visualization
DimPlot(pbmc, reduction = "umap", label=T)
install.packages("HGNChelper")
library(HGNChelper)
#load the functions and the dataset
source("scType_data/gene_sets_prepare.R")
source("scType_data/sctype_score_.R")
db_ <- "scType_data/ScTypeDB_full.xlsx"
# prepare gene sets
tissue = "Immune system"
gs_list = gene_sets_prepare(db_, tissue)
#Finally, let's assign cell types to each cluster:
# get cell-type by cell matrix
es.max = sctype_score(scRNAseqData = pbmc@assays[["RNA"]]@scale.data, scaled = TRUE,
gs = gs_list$gs_positive, gs2 = gs_list$gs_negative)
# merge by cluster
cL_resutls = do.call("rbind", lapply(unique(pbmc@meta.data[["seurat_clusters"]]), function(cl){
es.max.cl = sort(rowSums(es.max[ ,rownames(pbmc@meta.data[pbmc@meta.data[["seurat_clusters"]]==cl, ])]), decreasing = !0)
head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(pbmc@meta.data[["seurat_clusters"]]==cl)), 10)
}))
sctype_scores = cL_resutls %>% group_by(cluster) %>% top_n(n = 1, wt = scores)
print(sctype_scores[,1:3])
pbmc@meta.data$customclassif = ""
for(j in unique(sctype_scores$cluster)){
cl_type = sctype_scores[sctype_scores$cluster==j,];
pbmc@meta.data$customclassif[pbmc@meta.data$seurat_clusters == j] = as.character(cl_type$type[1])
}
DimPlot(pbmc, reduction = "umap", label = TRUE, group.by = 'customclassif')
#Rename the annotated clusters
pbmc@meta.data[["customclassif"]] <- gsub("^Classical Monocytes$", "Classical Mono", pbmc@meta.data[["customclassif"]])
pbmc@meta.data[["customclassif"]] <- gsub("^Non-classical monocytes$", "Non-classical mono", pbmc@meta.data[["customclassif"]])
pbmc@meta.data[["customclassif"]] <- gsub("^Natural killer  cells$", "NK cells", pbmc@meta.data[["customclassif"]])
pbmc@meta.data[["customclassif"]] <- gsub("^Myeloid Dendritic cells$", "DC", pbmc@meta.data[["customclassif"]])
DimPlot(pbmc, reduction = "umap", label = TRUE, repel = FALSE, group.by = 'customclassif')
devtools::install_github("sqjin/CellChat")
library(CellChat)
options(stringsAsFactors = FALSE)
# create a new CellChat object
cellchat <- createCellChat(object = pbmc, group.by = "customclassif")
cellchat <- setIdent(cellchat, ident.use = "customclassif") # set "customclassif" as default cell identity
#groupSize <- as.numeric(table(cellchat@idents)) # number of cells in each cell group
#Set the ligand-receptor interaction database
CellChatDB <- CellChatDB.human
showDatabaseCategory(CellChatDB)
# use a subset of CellChatDB for cell-cell communication analysis
CellChatDB.use <- subsetDB(CellChatDB, search = "Secreted Signaling") # use Secreted Signaling
# use all CellChatDB for cell-cell communication analysis
# CellChatDB.use <- CellChatDB # simply use the default CellChatDB
# set the used database in the object
cellchat@DB <- CellChatDB.use
# subset the expression data of signaling genes for saving computation cost
cellchat <- subsetData(cellchat) # This step is necessary even if using the whole database
future::plan("multisession", workers = 4) # do parallel
cellchat <- identifyOverExpressedGenes(cellchat)
cellchat <- identifyOverExpressedInteractions(cellchat)
#Compute the communication probability/strength between any interacting cell groups
cellchat <- computeCommunProb(cellchat)
# Filter out the cell-cell communication if there are only few number of cells in certain cell groups
cellchat <- filterCommunication(cellchat, min.cells = 10)
# compute the communication probability on signaling pathway level by summarizing the communication probabilities of all ligands-receptors interactions associated with each signaling pathway.
cellchat <- computeCommunProbPathway(cellchat)
#calculate the aggregated cell-cell communication network by counting the number of links or summarizing the communication probability
cellchat <- aggregateNet(cellchat)
# visualize the aggregated cell-cell communication network.
groupSize <- as.numeric(table(cellchat@idents))
netVisual_circle(cellchat@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
mat <- cellchat@net$weight
par(mfrow = c(4,3), xpd=TRUE)
for (i in 1:nrow(mat)) {
mat2 <- matrix(0, nrow = nrow(mat), ncol = ncol(mat), dimnames = dimnames(mat))
mat2[i, ] <- mat[i, ]
netVisual_circle(mat2, vertex.weight = groupSize, weight.scale = T, edge.weight.max = max(mat), title.name = rownames(mat)[i])
}
pathways.show <- c("MIF") #Macrophage migration inhibitory factor
# Circle plot
netVisual_aggregate(cellchat, signaling = pathways.show)
netAnalysis_contribution(cellchat, signaling = pathways.show)
pairLR.MIF <- extractEnrichedLR(cellchat, signaling = pathways.show, geneLR.return = FALSE)
# Circle plot
LR.show <- pairLR.MIF[1,] # show the first ligand-receptor pair
netVisual_individual(cellchat, signaling = pathways.show, pairLR.use = LR.show, layout = "circle")
LR.show <- pairLR.MIF[2,] # show the second ligand-receptor pair
netVisual_individual(cellchat, signaling = pathways.show, pairLR.use = LR.show, layout = "circle")
plotGeneExpression(cellchat, signaling = "MIF")
# Compute the network centrality scores
cellchat <- netAnalysis_computeCentrality(cellchat, slot.name = "netP") # the slot 'netP' means the inferred intercellular communication network of signaling pathways
# Visualize the computed centrality scores using heatmap, allowing ready identification of major signaling roles of cell groups
netAnalysis_signalingRole_network(cellchat, signaling = pathways.show, width = 8, height = 2.5, font.size = 10, measure.name = c("Sender", "Receiver"), measure=c("outdeg", "indeg"))
# Signaling role analysis on the aggregated cell-cell communication network from all signaling pathways
ht1 <- netAnalysis_signalingRole_heatmap(cellchat, pattern = "outgoing")
ht2 <- netAnalysis_signalingRole_heatmap(cellchat, pattern = "incoming")
ht1 + ht2
setwd("~/Desktop/scRNAseq_workshop_GretaBaltusyte_scripts_data")
